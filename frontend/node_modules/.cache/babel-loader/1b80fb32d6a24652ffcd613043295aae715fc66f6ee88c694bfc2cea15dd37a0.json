{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport { ref, onMounted, computed, nextTick, watch, onUnmounted } from 'vue';\nimport { useRoute } from 'vue-router';\nimport AppLayout from '@/layout/AppLayoutGlobal.vue';\nimport api from '@/services/api';\nimport Chart from 'chart.js/auto';\nexport default {\n  __name: 'ObjectActivityView',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const route = useRoute();\n    const object = ref(null);\n    const loading = ref(true);\n    const error = ref(null);\n    const stats = ref({\n      totalUtilisations: 0,\n      utilisateursUniques: 0,\n      tempsMoyen: 0,\n      derniereUtilisation: null,\n      usageParMembre: [],\n      usageParJour: Array(7).fill(0),\n      usageParHeure: Array(24).fill(0)\n    });\n    const history = ref([]);\n    const filteredHistory = ref([]);\n    const users = ref([]);\n    const selectedUser = ref('');\n    const selectedPeriod = ref('7');\n    const usageChart = ref(null);\n    const dayChart = ref(null);\n    const hourChart = ref(null);\n    const charts = ref([]);\n\n    // Fonction pour formater les dates\n    const formatDate = dateString => {\n      if (!dateString) return 'Jamais';\n      return new Date(dateString).toLocaleString('fr-FR');\n    };\n\n    // Fonction pour filtrer l'historique par utilisateur et période\n    const filterHistory = () => {\n      // Filtrer par utilisateur\n      let filtered = history.value;\n      if (selectedUser.value) {\n        filtered = filtered.filter(entry => entry.utilisateur._id === selectedUser.value);\n      }\n\n      // Filtrer par période\n      if (selectedPeriod.value) {\n        const daysAgo = parseInt(selectedPeriod.value);\n        const cutoffDate = new Date();\n        cutoffDate.setDate(cutoffDate.getDate() - daysAgo);\n        filtered = filtered.filter(entry => new Date(entry.date) >= cutoffDate);\n      }\n      filteredHistory.value = filtered;\n    };\n\n    // Charger les données de l'objet, des stats et de l'historique\n    const loadData = async () => {\n      try {\n        loading.value = true;\n        error.value = null;\n\n        // En-tête d'autorisation\n        const token = localStorage.getItem('token');\n        if (token) {\n          api.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n        }\n\n        // Obtenir les données en parallèle pour améliorer les performances\n        const [objectRes, statsRes, historyRes, usersRes] = await Promise.all([api.get(`/objets/${route.params.id}`), api.get(`/objets/${route.params.id}/stats`), api.get(`/objets/${route.params.id}/history`), api.get('/users')]);\n        object.value = objectRes.data;\n\n        // Fusionner les stats reçues avec les valeurs par défaut pour éviter les erreurs\n        if (statsRes.data) {\n          stats.value = {\n            ...stats.value,\n            ...statsRes.data\n          };\n        }\n        history.value = historyRes.data || [];\n        users.value = usersRes.data || [];\n\n        // Appliquer le filtrage initial\n        filterHistory();\n\n        // Initialiser les graphiques après avoir chargé les données\n        nextTick(() => {\n          initCharts();\n        });\n      } catch (err) {\n        console.error('Erreur lors du chargement des données:', err);\n        error.value = `Erreur lors du chargement des données: ${err.response?.data?.error || err.message || 'Erreur inconnue'}`;\n      } finally {\n        loading.value = false;\n      }\n    };\n\n    // Détruire les graphiques existants pour éviter les fuites de mémoire\n    const destroyCharts = () => {\n      charts.value.forEach(chart => {\n        if (chart) chart.destroy();\n      });\n      charts.value = [];\n    };\n\n    // Initialiser les graphiques\n    const initCharts = () => {\n      // Nettoyer les graphiques existants\n      destroyCharts();\n\n      // S'assurer que tous les éléments Canvas sont montés dans le DOM\n      if (!usageChart.value || !dayChart.value || !hourChart.value) {\n        console.warn('Les références Canvas ne sont pas encore disponibles');\n        return;\n      }\n      try {\n        // Graphique d'utilisation par membre\n        if (stats.value.usageParMembre && stats.value.usageParMembre.length > 0) {\n          const memberChart = new Chart(usageChart.value, {\n            type: 'bar',\n            data: {\n              labels: stats.value.usageParMembre.map(m => m.nom || 'Utilisateur'),\n              datasets: [{\n                label: 'Nombre d\\'utilisations',\n                data: stats.value.usageParMembre.map(m => m.count || 0),\n                backgroundColor: 'rgba(75, 192, 192, 0.2)',\n                borderColor: 'rgba(75, 192, 192, 1)',\n                borderWidth: 1\n              }]\n            },\n            options: {\n              responsive: true,\n              scales: {\n                y: {\n                  beginAtZero: true\n                }\n              }\n            }\n          });\n          charts.value.push(memberChart);\n        } else {\n          // Graphique vide avec message\n          const ctx = usageChart.value.getContext('2d');\n          ctx.font = '16px Arial';\n          ctx.fillStyle = '#666';\n          ctx.textAlign = 'center';\n          ctx.fillText('Aucune donnée disponible', usageChart.value.width / 2, usageChart.value.height / 2);\n        }\n\n        // Graphique d'utilisation par jour\n        const dayLabels = ['Dim', 'Lun', 'Mar', 'Mer', 'Jeu', 'Ven', 'Sam'];\n        const dayValues = Array.isArray(stats.value.usageParJour) ? stats.value.usageParJour : Array(7).fill(0);\n        const daysChart = new Chart(dayChart.value, {\n          type: 'line',\n          data: {\n            labels: dayLabels,\n            datasets: [{\n              label: 'Utilisations',\n              data: dayValues,\n              fill: false,\n              borderColor: 'rgb(75, 192, 192)',\n              tension: 0.1\n            }]\n          },\n          options: {\n            responsive: true,\n            scales: {\n              y: {\n                beginAtZero: true\n              }\n            }\n          }\n        });\n        charts.value.push(daysChart);\n\n        // Graphique d'utilisation par heure\n        const hourLabels = Array.from({\n          length: 24\n        }, (_, i) => `${i}h`);\n        const hourValues = Array.isArray(stats.value.usageParHeure) ? stats.value.usageParHeure : Array(24).fill(0);\n        const hoursChart = new Chart(hourChart.value, {\n          type: 'bar',\n          data: {\n            labels: hourLabels,\n            datasets: [{\n              label: 'Utilisations',\n              data: hourValues,\n              backgroundColor: 'rgba(153, 102, 255, 0.2)',\n              borderColor: 'rgba(153, 102, 255, 1)',\n              borderWidth: 1\n            }]\n          },\n          options: {\n            responsive: true,\n            scales: {\n              y: {\n                beginAtZero: true\n              }\n            }\n          }\n        });\n        charts.value.push(hoursChart);\n      } catch (err) {\n        console.error('Erreur lors de l\\'initialisation des graphiques:', err);\n        error.value = `Erreur lors de l'initialisation des graphiques: ${err.message}`;\n      }\n    };\n\n    // Exécuter le filtrage lorsque les sélections changent\n    watch([selectedUser, selectedPeriod], () => {\n      filterHistory();\n    });\n\n    // Nettoyer les ressources lors de la destruction du composant\n    onUnmounted(() => {\n      destroyCharts();\n    });\n    onMounted(() => {\n      loadData();\n    });\n    const __returned__ = {\n      route,\n      object,\n      loading,\n      error,\n      stats,\n      history,\n      filteredHistory,\n      users,\n      selectedUser,\n      selectedPeriod,\n      usageChart,\n      dayChart,\n      hourChart,\n      charts,\n      formatDate,\n      filterHistory,\n      loadData,\n      destroyCharts,\n      initCharts,\n      ref,\n      onMounted,\n      computed,\n      nextTick,\n      watch,\n      onUnmounted,\n      get useRoute() {\n        return useRoute;\n      },\n      AppLayout,\n      get api() {\n        return api;\n      },\n      get Chart() {\n        return Chart;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","onMounted","computed","nextTick","watch","onUnmounted","useRoute","AppLayout","api","Chart","route","object","loading","error","stats","totalUtilisations","utilisateursUniques","tempsMoyen","derniereUtilisation","usageParMembre","usageParJour","Array","fill","usageParHeure","history","filteredHistory","users","selectedUser","selectedPeriod","usageChart","dayChart","hourChart","charts","formatDate","dateString","Date","toLocaleString","filterHistory","filtered","value","filter","entry","utilisateur","_id","daysAgo","parseInt","cutoffDate","setDate","getDate","date","loadData","token","localStorage","getItem","defaults","headers","common","objectRes","statsRes","historyRes","usersRes","Promise","all","get","params","id","data","initCharts","err","console","response","message","destroyCharts","forEach","chart","destroy","warn","length","memberChart","type","labels","map","m","nom","datasets","label","count","backgroundColor","borderColor","borderWidth","options","responsive","scales","y","beginAtZero","push","ctx","getContext","font","fillStyle","textAlign","fillText","width","height","dayLabels","dayValues","isArray","daysChart","tension","hourLabels","from","_","i","hourValues","hoursChart"],"sources":["C:/Users/benab/Desktop/COURS 24_25/S2/WEB/V4/Projet_WEB_ING1/frontend/src/views/ObjectActivityView.vue"],"sourcesContent":["<template>\r\n  <AppLayout>\r\n    <div class=\"object-activity-page\">\r\n      <div class=\"header\">\r\n        <router-link to=\"/manage/objects\">\r\n          <button class=\"btn-retour\">← Retour à la gestion des objets</button>\r\n        </router-link>\r\n        <h1>📊 Activité de l'objet : {{ object?.nom || 'Chargement...' }}</h1>\r\n      </div>\r\n\r\n      <div v-if=\"loading\" class=\"loading\">\r\n        <div class=\"spinner\"></div>\r\n        <p>Chargement des données...</p>\r\n      </div>\r\n\r\n      <div v-else-if=\"error\" class=\"error\">\r\n        <p>{{ error }}</p>\r\n        <button @click=\"loadData\" class=\"retry-btn\">\r\n          <i class=\"fas fa-sync-alt\"></i> Réessayer\r\n        </button>\r\n      </div>\r\n\r\n      <div v-else class=\"activity-content\">\r\n        <!-- Vue d'ensemble -->\r\n        <div class=\"overview-section\">\r\n          <h2>Vue d'ensemble</h2>\r\n          <div class=\"stats-grid\">\r\n            <div class=\"stat-card\">\r\n              <h3>Utilisations totales</h3>\r\n              <p class=\"stat-value\">{{ stats.totalUtilisations }}</p>\r\n            </div>\r\n            <div class=\"stat-card\">\r\n              <h3>Utilisateurs uniques</h3>\r\n              <p class=\"stat-value\">{{ stats.utilisateursUniques }}</p>\r\n            </div>\r\n            <div class=\"stat-card\">\r\n              <h3>Temps d'utilisation moyen</h3>\r\n              <p class=\"stat-value\">{{ stats.tempsMoyen || 0 }} min</p>\r\n            </div>\r\n            <div class=\"stat-card\">\r\n              <h3>Dernière utilisation</h3>\r\n              <p class=\"stat-value\">{{ formatDate(stats.derniereUtilisation) }}</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Graphiques -->\r\n        <div class=\"charts-section\">\r\n          <div class=\"chart-container\">\r\n            <h3>Utilisation par membre de la famille</h3>\r\n            <canvas ref=\"usageChart\"></canvas>\r\n            <p v-if=\"!stats.usageParMembre || stats.usageParMembre.length === 0\" class=\"no-data\">\r\n              Aucune donnée disponible\r\n            </p>\r\n          </div>\r\n          <div class=\"chart-container\">\r\n            <h3>Utilisation par jour de la semaine</h3>\r\n            <canvas ref=\"dayChart\"></canvas>\r\n          </div>\r\n          <div class=\"chart-container\">\r\n            <h3>Utilisation par heure de la journée</h3>\r\n            <canvas ref=\"hourChart\"></canvas>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Historique détaillé -->\r\n        <div class=\"history-section\">\r\n          <h2>Historique détaillé</h2>\r\n          <div class=\"filters\">\r\n            <select v-model=\"selectedUser\" @change=\"filterHistory\">\r\n              <option value=\"\">Tous les utilisateurs</option>\r\n              <option v-for=\"user in users\" :key=\"user._id\" :value=\"user._id\">\r\n                {{ user.personne?.prenom || '' }} {{ user.personne?.nom || '' }}\r\n              </option>\r\n            </select>\r\n            <select v-model=\"selectedPeriod\" @change=\"filterHistory\">\r\n              <option value=\"7\">7 derniers jours</option>\r\n              <option value=\"30\">30 derniers jours</option>\r\n              <option value=\"90\">90 derniers jours</option>\r\n              <option value=\"365\">12 derniers mois</option>\r\n              <option value=\"\">Toute la période</option>\r\n            </select>\r\n          </div>\r\n          \r\n          <div v-if=\"filteredHistory.length === 0\" class=\"no-history\">\r\n            <p>Aucune utilisation trouvée pour la période sélectionnée</p>\r\n          </div>\r\n          \r\n          <div v-else class=\"history-table\">\r\n            <table>\r\n              <thead>\r\n                <tr>\r\n                  <th>Date</th>\r\n                  <th>Utilisateur</th>\r\n                  <th>Durée</th>\r\n                  <th>Mode</th>\r\n                  <th>Température</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                <tr v-for=\"entry in filteredHistory\" :key=\"entry._id\">\r\n                  <td>{{ formatDate(entry.date) }}</td>\r\n                  <td>{{ entry.utilisateur?.prenom || '' }} {{ entry.utilisateur?.nom || '' }}</td>\r\n                  <td>{{ entry.duree || 0 }} min</td>\r\n                  <td>{{ entry.mode || '-' }}</td>\r\n                  <td>{{ entry.temperature || '-' }}°C</td>\r\n                </tr>\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </AppLayout>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, onMounted, computed, nextTick, watch, onUnmounted } from 'vue'\r\nimport { useRoute } from 'vue-router'\r\nimport AppLayout from '@/layout/AppLayoutGlobal.vue'\r\nimport api from '@/services/api'\r\nimport Chart from 'chart.js/auto'\r\n\r\nconst route = useRoute()\r\nconst object = ref(null)\r\nconst loading = ref(true)\r\nconst error = ref(null)\r\nconst stats = ref({\r\n  totalUtilisations: 0,\r\n  utilisateursUniques: 0,\r\n  tempsMoyen: 0,\r\n  derniereUtilisation: null,\r\n  usageParMembre: [],\r\n  usageParJour: Array(7).fill(0),\r\n  usageParHeure: Array(24).fill(0)\r\n})\r\nconst history = ref([])\r\nconst filteredHistory = ref([])\r\nconst users = ref([])\r\nconst selectedUser = ref('')\r\nconst selectedPeriod = ref('7')\r\nconst usageChart = ref(null)\r\nconst dayChart = ref(null)\r\nconst hourChart = ref(null)\r\nconst charts = ref([])\r\n\r\n// Fonction pour formater les dates\r\nconst formatDate = (dateString) => {\r\n  if (!dateString) return 'Jamais'\r\n  return new Date(dateString).toLocaleString('fr-FR')\r\n}\r\n\r\n// Fonction pour filtrer l'historique par utilisateur et période\r\nconst filterHistory = () => {\r\n  // Filtrer par utilisateur\r\n  let filtered = history.value\r\n  if (selectedUser.value) {\r\n    filtered = filtered.filter(entry => entry.utilisateur._id === selectedUser.value)\r\n  }\r\n  \r\n  // Filtrer par période\r\n  if (selectedPeriod.value) {\r\n    const daysAgo = parseInt(selectedPeriod.value)\r\n    const cutoffDate = new Date()\r\n    cutoffDate.setDate(cutoffDate.getDate() - daysAgo)\r\n    filtered = filtered.filter(entry => new Date(entry.date) >= cutoffDate)\r\n  }\r\n  \r\n  filteredHistory.value = filtered\r\n}\r\n\r\n// Charger les données de l'objet, des stats et de l'historique\r\nconst loadData = async () => {\r\n  try {\r\n    loading.value = true\r\n    error.value = null\r\n    \r\n    // En-tête d'autorisation\r\n    const token = localStorage.getItem('token')\r\n    if (token) {\r\n      api.defaults.headers.common['Authorization'] = `Bearer ${token}`\r\n    }\r\n    \r\n    // Obtenir les données en parallèle pour améliorer les performances\r\n    const [objectRes, statsRes, historyRes, usersRes] = await Promise.all([\r\n      api.get(`/objets/${route.params.id}`),\r\n      api.get(`/objets/${route.params.id}/stats`),\r\n      api.get(`/objets/${route.params.id}/history`),\r\n      api.get('/users')\r\n    ])\r\n\r\n    object.value = objectRes.data\r\n    \r\n    // Fusionner les stats reçues avec les valeurs par défaut pour éviter les erreurs\r\n    if (statsRes.data) {\r\n      stats.value = {\r\n        ...stats.value,\r\n        ...statsRes.data\r\n      }\r\n    }\r\n    \r\n    history.value = historyRes.data || []\r\n    users.value = usersRes.data || []\r\n    \r\n    // Appliquer le filtrage initial\r\n    filterHistory()\r\n    \r\n    // Initialiser les graphiques après avoir chargé les données\r\n    nextTick(() => {\r\n      initCharts()\r\n    })\r\n  } catch (err) {\r\n    console.error('Erreur lors du chargement des données:', err)\r\n    error.value = `Erreur lors du chargement des données: ${err.response?.data?.error || err.message || 'Erreur inconnue'}`\r\n  } finally {\r\n    loading.value = false\r\n  }\r\n}\r\n\r\n// Détruire les graphiques existants pour éviter les fuites de mémoire\r\nconst destroyCharts = () => {\r\n  charts.value.forEach(chart => {\r\n    if (chart) chart.destroy()\r\n  })\r\n  charts.value = []\r\n}\r\n\r\n// Initialiser les graphiques\r\nconst initCharts = () => {\r\n  // Nettoyer les graphiques existants\r\n  destroyCharts()\r\n  \r\n  // S'assurer que tous les éléments Canvas sont montés dans le DOM\r\n  if (!usageChart.value || !dayChart.value || !hourChart.value) {\r\n    console.warn('Les références Canvas ne sont pas encore disponibles')\r\n    return\r\n  }\r\n  \r\n  try {\r\n    // Graphique d'utilisation par membre\r\n    if (stats.value.usageParMembre && stats.value.usageParMembre.length > 0) {\r\n      const memberChart = new Chart(usageChart.value, {\r\n        type: 'bar',\r\n        data: {\r\n          labels: stats.value.usageParMembre.map(m => m.nom || 'Utilisateur'),\r\n          datasets: [{\r\n            label: 'Nombre d\\'utilisations',\r\n            data: stats.value.usageParMembre.map(m => m.count || 0),\r\n            backgroundColor: 'rgba(75, 192, 192, 0.2)',\r\n            borderColor: 'rgba(75, 192, 192, 1)',\r\n            borderWidth: 1\r\n          }]\r\n        },\r\n        options: {\r\n          responsive: true,\r\n          scales: {\r\n            y: {\r\n              beginAtZero: true\r\n            }\r\n          }\r\n        }\r\n      })\r\n      charts.value.push(memberChart)\r\n    } else {\r\n      // Graphique vide avec message\r\n      const ctx = usageChart.value.getContext('2d')\r\n      ctx.font = '16px Arial'\r\n      ctx.fillStyle = '#666'\r\n      ctx.textAlign = 'center'\r\n      ctx.fillText('Aucune donnée disponible', usageChart.value.width / 2, usageChart.value.height / 2)\r\n    }\r\n\r\n    // Graphique d'utilisation par jour\r\n    const dayLabels = ['Dim', 'Lun', 'Mar', 'Mer', 'Jeu', 'Ven', 'Sam']\r\n    const dayValues = Array.isArray(stats.value.usageParJour) ? stats.value.usageParJour : Array(7).fill(0)\r\n    \r\n    const daysChart = new Chart(dayChart.value, {\r\n      type: 'line',\r\n      data: {\r\n        labels: dayLabels,\r\n        datasets: [{\r\n          label: 'Utilisations',\r\n          data: dayValues,\r\n          fill: false,\r\n          borderColor: 'rgb(75, 192, 192)',\r\n          tension: 0.1\r\n        }]\r\n      },\r\n      options: {\r\n        responsive: true,\r\n        scales: {\r\n          y: {\r\n            beginAtZero: true\r\n          }\r\n        }\r\n      }\r\n    })\r\n    charts.value.push(daysChart)\r\n\r\n    // Graphique d'utilisation par heure\r\n    const hourLabels = Array.from({length: 24}, (_, i) => `${i}h`)\r\n    const hourValues = Array.isArray(stats.value.usageParHeure) ? stats.value.usageParHeure : Array(24).fill(0)\r\n    \r\n    const hoursChart = new Chart(hourChart.value, {\r\n      type: 'bar',\r\n      data: {\r\n        labels: hourLabels,\r\n        datasets: [{\r\n          label: 'Utilisations',\r\n          data: hourValues,\r\n          backgroundColor: 'rgba(153, 102, 255, 0.2)',\r\n          borderColor: 'rgba(153, 102, 255, 1)',\r\n          borderWidth: 1\r\n        }]\r\n      },\r\n      options: {\r\n        responsive: true,\r\n        scales: {\r\n          y: {\r\n            beginAtZero: true\r\n          }\r\n        }\r\n      }\r\n    })\r\n    charts.value.push(hoursChart)\r\n  } catch (err) {\r\n    console.error('Erreur lors de l\\'initialisation des graphiques:', err)\r\n    error.value = `Erreur lors de l'initialisation des graphiques: ${err.message}`\r\n  }\r\n}\r\n\r\n// Exécuter le filtrage lorsque les sélections changent\r\nwatch([selectedUser, selectedPeriod], () => {\r\n  filterHistory()\r\n})\r\n\r\n// Nettoyer les ressources lors de la destruction du composant\r\nonUnmounted(() => {\r\n  destroyCharts()\r\n})\r\n\r\nonMounted(() => {\r\n  loadData()\r\n})\r\n</script>\r\n\r\n<style scoped>\r\n.object-activity-page {\r\n  padding: 20px;\r\n  max-width: 1200px;\r\n  margin: 0 auto;\r\n}\r\n\r\n.header {\r\n  margin-bottom: 30px;\r\n}\r\n\r\n.btn-retour {\r\n  background-color: #f0f0f0;\r\n  border: none;\r\n  padding: 8px 16px;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.loading {\r\n  text-align: center;\r\n  padding: 40px;\r\n}\r\n\r\n.spinner {\r\n  border: 4px solid #f3f3f3;\r\n  border-top: 4px solid #3498db;\r\n  border-radius: 50%;\r\n  width: 40px;\r\n  height: 40px;\r\n  animation: spin 1s linear infinite;\r\n  margin: 0 auto 20px;\r\n}\r\n\r\n@keyframes spin {\r\n  0% { transform: rotate(0deg); }\r\n  100% { transform: rotate(360deg); }\r\n}\r\n\r\n.error {\r\n  color: #dc3545;\r\n  text-align: center;\r\n  padding: 20px;\r\n}\r\n\r\n.overview-section {\r\n  margin-bottom: 40px;\r\n}\r\n\r\n.stats-grid {\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\r\n  gap: 20px;\r\n  margin-top: 20px;\r\n}\r\n\r\n.stat-card {\r\n  background: white;\r\n  padding: 20px;\r\n  border-radius: 8px;\r\n  box-shadow: 0 2px 4px rgba(0,0,0,0.1);\r\n  text-align: center;\r\n}\r\n\r\n.stat-value {\r\n  font-size: 24px;\r\n  font-weight: bold;\r\n  color: #2c5038;\r\n  margin-top: 10px;\r\n}\r\n\r\n.charts-section {\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\r\n  gap: 20px;\r\n  margin-bottom: 40px;\r\n}\r\n\r\n.chart-container {\r\n  background: white;\r\n  padding: 20px;\r\n  border-radius: 8px;\r\n  box-shadow: 0 2px 4px rgba(0,0,0,0.1);\r\n}\r\n\r\n.history-section {\r\n  background: white;\r\n  padding: 20px;\r\n  border-radius: 8px;\r\n  box-shadow: 0 2px 4px rgba(0,0,0,0.1);\r\n}\r\n\r\n.filters {\r\n  display: flex;\r\n  gap: 20px;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.filters select {\r\n  padding: 8px 12px;\r\n  border-radius: 4px;\r\n  border: 1px solid #ddd;\r\n  background-color: white;\r\n  min-width: 150px;\r\n  cursor: pointer;\r\n}\r\n\r\n.history-table {\r\n  overflow-x: auto;\r\n}\r\n\r\ntable {\r\n  width: 100%;\r\n  border-collapse: collapse;\r\n}\r\n\r\nth, td {\r\n  padding: 12px;\r\n  text-align: left;\r\n  border-bottom: 1px solid #ddd;\r\n}\r\n\r\nth {\r\n  background-color: #f8f9fa;\r\n  font-weight: 600;\r\n}\r\n\r\ntr:hover {\r\n  background-color: #f5f5f5;\r\n}\r\n\r\n.no-data, .no-history {\r\n  text-align: center;\r\n  padding: 20px;\r\n  color: #666;\r\n  font-style: italic;\r\n}\r\n\r\n.retry-btn {\r\n  background-color: #3498db;\r\n  color: white;\r\n  border: none;\r\n  padding: 8px 16px;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 8px;\r\n  margin: 20px auto;\r\n}\r\n\r\n.retry-btn i {\r\n  animation: rotate 2s linear infinite;\r\n}\r\n\r\n@keyframes rotate {\r\n  from { transform: rotate(0deg); }\r\n  to { transform: rotate(360deg); }\r\n}\r\n\r\n@media (max-width: 768px) {\r\n  .charts-section {\r\n    grid-template-columns: 1fr;\r\n  }\r\n  \r\n  .stats-grid {\r\n    grid-template-columns: repeat(2, 1fr);\r\n  }\r\n  \r\n  .filters {\r\n    flex-direction: column;\r\n    gap: 10px;\r\n  }\r\n}\r\n</style> "],"mappings":";;;;;AAqHA,SAASA,GAAG,EAAEC,SAAS,EAAEC,QAAQ,EAAEC,QAAQ,EAAEC,KAAK,EAAEC,WAAW,QAAQ,KAAK;AAC5E,SAASC,QAAQ,QAAQ,YAAY;AACrC,OAAOC,SAAS,MAAM,8BAA8B;AACpD,OAAOC,GAAG,MAAM,gBAAgB;AAChC,OAAOC,KAAK,MAAM,eAAe;;;;;;;IAEjC,MAAMC,KAAK,GAAGJ,QAAQ,CAAC,CAAC;IACxB,MAAMK,MAAM,GAAGX,GAAG,CAAC,IAAI,CAAC;IACxB,MAAMY,OAAO,GAAGZ,GAAG,CAAC,IAAI,CAAC;IACzB,MAAMa,KAAK,GAAGb,GAAG,CAAC,IAAI,CAAC;IACvB,MAAMc,KAAK,GAAGd,GAAG,CAAC;MAChBe,iBAAiB,EAAE,CAAC;MACpBC,mBAAmB,EAAE,CAAC;MACtBC,UAAU,EAAE,CAAC;MACbC,mBAAmB,EAAE,IAAI;MACzBC,cAAc,EAAE,EAAE;MAClBC,YAAY,EAAEC,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,CAAC,CAAC;MAC9BC,aAAa,EAAEF,KAAK,CAAC,EAAE,CAAC,CAACC,IAAI,CAAC,CAAC;IACjC,CAAC,CAAC;IACF,MAAME,OAAO,GAAGxB,GAAG,CAAC,EAAE,CAAC;IACvB,MAAMyB,eAAe,GAAGzB,GAAG,CAAC,EAAE,CAAC;IAC/B,MAAM0B,KAAK,GAAG1B,GAAG,CAAC,EAAE,CAAC;IACrB,MAAM2B,YAAY,GAAG3B,GAAG,CAAC,EAAE,CAAC;IAC5B,MAAM4B,cAAc,GAAG5B,GAAG,CAAC,GAAG,CAAC;IAC/B,MAAM6B,UAAU,GAAG7B,GAAG,CAAC,IAAI,CAAC;IAC5B,MAAM8B,QAAQ,GAAG9B,GAAG,CAAC,IAAI,CAAC;IAC1B,MAAM+B,SAAS,GAAG/B,GAAG,CAAC,IAAI,CAAC;IAC3B,MAAMgC,MAAM,GAAGhC,GAAG,CAAC,EAAE,CAAC;;IAEtB;IACA,MAAMiC,UAAU,GAAIC,UAAU,IAAK;MACjC,IAAI,CAACA,UAAU,EAAE,OAAO,QAAQ;MAChC,OAAO,IAAIC,IAAI,CAACD,UAAU,CAAC,CAACE,cAAc,CAAC,OAAO,CAAC;IACrD,CAAC;;IAED;IACA,MAAMC,aAAa,GAAGA,CAAA,KAAM;MAC1B;MACA,IAAIC,QAAQ,GAAGd,OAAO,CAACe,KAAK;MAC5B,IAAIZ,YAAY,CAACY,KAAK,EAAE;QACtBD,QAAQ,GAAGA,QAAQ,CAACE,MAAM,CAACC,KAAK,IAAIA,KAAK,CAACC,WAAW,CAACC,GAAG,KAAKhB,YAAY,CAACY,KAAK,CAAC;MACnF;;MAEA;MACA,IAAIX,cAAc,CAACW,KAAK,EAAE;QACxB,MAAMK,OAAO,GAAGC,QAAQ,CAACjB,cAAc,CAACW,KAAK,CAAC;QAC9C,MAAMO,UAAU,GAAG,IAAIX,IAAI,CAAC,CAAC;QAC7BW,UAAU,CAACC,OAAO,CAACD,UAAU,CAACE,OAAO,CAAC,CAAC,GAAGJ,OAAO,CAAC;QAClDN,QAAQ,GAAGA,QAAQ,CAACE,MAAM,CAACC,KAAK,IAAI,IAAIN,IAAI,CAACM,KAAK,CAACQ,IAAI,CAAC,IAAIH,UAAU,CAAC;MACzE;MAEArB,eAAe,CAACc,KAAK,GAAGD,QAAQ;IAClC,CAAC;;IAED;IACA,MAAMY,QAAQ,GAAG,MAAAA,CAAA,KAAY;MAC3B,IAAI;QACFtC,OAAO,CAAC2B,KAAK,GAAG,IAAI;QACpB1B,KAAK,CAAC0B,KAAK,GAAG,IAAI;;QAElB;QACA,MAAMY,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;QAC3C,IAAIF,KAAK,EAAE;UACT3C,GAAG,CAAC8C,QAAQ,CAACC,OAAO,CAACC,MAAM,CAAC,eAAe,CAAC,GAAG,UAAUL,KAAK,EAAE;QAClE;;QAEA;QACA,MAAM,CAACM,SAAS,EAAEC,QAAQ,EAAEC,UAAU,EAAEC,QAAQ,CAAC,GAAG,MAAMC,OAAO,CAACC,GAAG,CAAC,CACpEtD,GAAG,CAACuD,GAAG,CAAC,WAAWrD,KAAK,CAACsD,MAAM,CAACC,EAAE,EAAE,CAAC,EACrCzD,GAAG,CAACuD,GAAG,CAAC,WAAWrD,KAAK,CAACsD,MAAM,CAACC,EAAE,QAAQ,CAAC,EAC3CzD,GAAG,CAACuD,GAAG,CAAC,WAAWrD,KAAK,CAACsD,MAAM,CAACC,EAAE,UAAU,CAAC,EAC7CzD,GAAG,CAACuD,GAAG,CAAC,QAAQ,CAAC,CAClB,CAAC;QAEFpD,MAAM,CAAC4B,KAAK,GAAGkB,SAAS,CAACS,IAAI;;QAE7B;QACA,IAAIR,QAAQ,CAACQ,IAAI,EAAE;UACjBpD,KAAK,CAACyB,KAAK,GAAG;YACZ,GAAGzB,KAAK,CAACyB,KAAK;YACd,GAAGmB,QAAQ,CAACQ;UACd,CAAC;QACH;QAEA1C,OAAO,CAACe,KAAK,GAAGoB,UAAU,CAACO,IAAI,IAAI,EAAE;QACrCxC,KAAK,CAACa,KAAK,GAAGqB,QAAQ,CAACM,IAAI,IAAI,EAAE;;QAEjC;QACA7B,aAAa,CAAC,CAAC;;QAEf;QACAlC,QAAQ,CAAC,MAAM;UACbgE,UAAU,CAAC,CAAC;QACd,CAAC,CAAC;MACJ,CAAC,CAAC,OAAOC,GAAG,EAAE;QACZC,OAAO,CAACxD,KAAK,CAAC,wCAAwC,EAAEuD,GAAG,CAAC;QAC5DvD,KAAK,CAAC0B,KAAK,GAAG,0CAA0C6B,GAAG,CAACE,QAAQ,EAAEJ,IAAI,EAAErD,KAAK,IAAIuD,GAAG,CAACG,OAAO,IAAI,iBAAiB,EAAE;MACzH,CAAC,SAAS;QACR3D,OAAO,CAAC2B,KAAK,GAAG,KAAK;MACvB;IACF,CAAC;;IAED;IACA,MAAMiC,aAAa,GAAGA,CAAA,KAAM;MAC1BxC,MAAM,CAACO,KAAK,CAACkC,OAAO,CAACC,KAAK,IAAI;QAC5B,IAAIA,KAAK,EAAEA,KAAK,CAACC,OAAO,CAAC,CAAC;MAC5B,CAAC,CAAC;MACF3C,MAAM,CAACO,KAAK,GAAG,EAAE;IACnB,CAAC;;IAED;IACA,MAAM4B,UAAU,GAAGA,CAAA,KAAM;MACvB;MACAK,aAAa,CAAC,CAAC;;MAEf;MACA,IAAI,CAAC3C,UAAU,CAACU,KAAK,IAAI,CAACT,QAAQ,CAACS,KAAK,IAAI,CAACR,SAAS,CAACQ,KAAK,EAAE;QAC5D8B,OAAO,CAACO,IAAI,CAAC,sDAAsD,CAAC;QACpE;MACF;MAEA,IAAI;QACF;QACA,IAAI9D,KAAK,CAACyB,KAAK,CAACpB,cAAc,IAAIL,KAAK,CAACyB,KAAK,CAACpB,cAAc,CAAC0D,MAAM,GAAG,CAAC,EAAE;UACvE,MAAMC,WAAW,GAAG,IAAIrE,KAAK,CAACoB,UAAU,CAACU,KAAK,EAAE;YAC9CwC,IAAI,EAAE,KAAK;YACXb,IAAI,EAAE;cACJc,MAAM,EAAElE,KAAK,CAACyB,KAAK,CAACpB,cAAc,CAAC8D,GAAG,CAACC,CAAC,IAAIA,CAAC,CAACC,GAAG,IAAI,aAAa,CAAC;cACnEC,QAAQ,EAAE,CAAC;gBACTC,KAAK,EAAE,wBAAwB;gBAC/BnB,IAAI,EAAEpD,KAAK,CAACyB,KAAK,CAACpB,cAAc,CAAC8D,GAAG,CAACC,CAAC,IAAIA,CAAC,CAACI,KAAK,IAAI,CAAC,CAAC;gBACvDC,eAAe,EAAE,yBAAyB;gBAC1CC,WAAW,EAAE,uBAAuB;gBACpCC,WAAW,EAAE;cACf,CAAC;YACH,CAAC;YACDC,OAAO,EAAE;cACPC,UAAU,EAAE,IAAI;cAChBC,MAAM,EAAE;gBACNC,CAAC,EAAE;kBACDC,WAAW,EAAE;gBACf;cACF;YACF;UACF,CAAC,CAAC;UACF9D,MAAM,CAACO,KAAK,CAACwD,IAAI,CAACjB,WAAW,CAAC;QAChC,CAAC,MAAM;UACL;UACA,MAAMkB,GAAG,GAAGnE,UAAU,CAACU,KAAK,CAAC0D,UAAU,CAAC,IAAI,CAAC;UAC7CD,GAAG,CAACE,IAAI,GAAG,YAAY;UACvBF,GAAG,CAACG,SAAS,GAAG,MAAM;UACtBH,GAAG,CAACI,SAAS,GAAG,QAAQ;UACxBJ,GAAG,CAACK,QAAQ,CAAC,0BAA0B,EAAExE,UAAU,CAACU,KAAK,CAAC+D,KAAK,GAAG,CAAC,EAAEzE,UAAU,CAACU,KAAK,CAACgE,MAAM,GAAG,CAAC,CAAC;QACnG;;QAEA;QACA,MAAMC,SAAS,GAAG,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC;QACnE,MAAMC,SAAS,GAAGpF,KAAK,CAACqF,OAAO,CAAC5F,KAAK,CAACyB,KAAK,CAACnB,YAAY,CAAC,GAAGN,KAAK,CAACyB,KAAK,CAACnB,YAAY,GAAGC,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,CAAC,CAAC;QAEvG,MAAMqF,SAAS,GAAG,IAAIlG,KAAK,CAACqB,QAAQ,CAACS,KAAK,EAAE;UAC1CwC,IAAI,EAAE,MAAM;UACZb,IAAI,EAAE;YACJc,MAAM,EAAEwB,SAAS;YACjBpB,QAAQ,EAAE,CAAC;cACTC,KAAK,EAAE,cAAc;cACrBnB,IAAI,EAAEuC,SAAS;cACfnF,IAAI,EAAE,KAAK;cACXkE,WAAW,EAAE,mBAAmB;cAChCoB,OAAO,EAAE;YACX,CAAC;UACH,CAAC;UACDlB,OAAO,EAAE;YACPC,UAAU,EAAE,IAAI;YAChBC,MAAM,EAAE;cACNC,CAAC,EAAE;gBACDC,WAAW,EAAE;cACf;YACF;UACF;QACF,CAAC,CAAC;QACF9D,MAAM,CAACO,KAAK,CAACwD,IAAI,CAACY,SAAS,CAAC;;QAE5B;QACA,MAAME,UAAU,GAAGxF,KAAK,CAACyF,IAAI,CAAC;UAACjC,MAAM,EAAE;QAAE,CAAC,EAAE,CAACkC,CAAC,EAAEC,CAAC,KAAK,GAAGA,CAAC,GAAG,CAAC;QAC9D,MAAMC,UAAU,GAAG5F,KAAK,CAACqF,OAAO,CAAC5F,KAAK,CAACyB,KAAK,CAAChB,aAAa,CAAC,GAAGT,KAAK,CAACyB,KAAK,CAAChB,aAAa,GAAGF,KAAK,CAAC,EAAE,CAAC,CAACC,IAAI,CAAC,CAAC,CAAC;QAE3G,MAAM4F,UAAU,GAAG,IAAIzG,KAAK,CAACsB,SAAS,CAACQ,KAAK,EAAE;UAC5CwC,IAAI,EAAE,KAAK;UACXb,IAAI,EAAE;YACJc,MAAM,EAAE6B,UAAU;YAClBzB,QAAQ,EAAE,CAAC;cACTC,KAAK,EAAE,cAAc;cACrBnB,IAAI,EAAE+C,UAAU;cAChB1B,eAAe,EAAE,0BAA0B;cAC3CC,WAAW,EAAE,wBAAwB;cACrCC,WAAW,EAAE;YACf,CAAC;UACH,CAAC;UACDC,OAAO,EAAE;YACPC,UAAU,EAAE,IAAI;YAChBC,MAAM,EAAE;cACNC,CAAC,EAAE;gBACDC,WAAW,EAAE;cACf;YACF;UACF;QACF,CAAC,CAAC;QACF9D,MAAM,CAACO,KAAK,CAACwD,IAAI,CAACmB,UAAU,CAAC;MAC/B,CAAC,CAAC,OAAO9C,GAAG,EAAE;QACZC,OAAO,CAACxD,KAAK,CAAC,kDAAkD,EAAEuD,GAAG,CAAC;QACtEvD,KAAK,CAAC0B,KAAK,GAAG,mDAAmD6B,GAAG,CAACG,OAAO,EAAE;MAChF;IACF,CAAC;;IAED;IACAnE,KAAK,CAAC,CAACuB,YAAY,EAAEC,cAAc,CAAC,EAAE,MAAM;MAC1CS,aAAa,CAAC,CAAC;IACjB,CAAC,CAAC;;IAEF;IACAhC,WAAW,CAAC,MAAM;MAChBmE,aAAa,CAAC,CAAC;IACjB,CAAC,CAAC;IAEFvE,SAAS,CAAC,MAAM;MACdiD,QAAQ,CAAC,CAAC;IACZ,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}